<?php
namespace App\Http\Controllers;

// Temp fix for increment max execution time
ini_set('max_execution_time', 120);

use Illuminate\Support\Facades\Http;
use Illuminate\Http\Request;
use Intervention\Image\ImageManager;
use Storage;
use TCPDF;

class Landing extends Controller
{
    /**
     * Index method that display landing page
     */
    public function index()
    {
        $viewParameters = [
            "designList" => $this->requestDesignList()
        ];        

        return view("landing/index", $viewParameters);
    }

    public function download(Request $request)
    {
        $this->generateDesignListPDF($request->input('id'));
    }

    /**
     * Generate PDF for the selected image
     */
    private function generateDesignListPDF($id)
    {
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // Information
        $pdf->SetCreator(PDF_CREATOR);
        $pdf->SetAuthor("MyPoscard");
        $pdf->SetTitle("MyPoscard");

        // Scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
        $pdf->setJPEGQuality(100);
        
        // A4 Page
        $pdf->AddPage('P','A5');

        // Image
        $pdf->SetXY(0, 0);
        $pdf->Image(storage_path('app/cards/full_' . $id . '.jpg' ), 0, 0, 150, 0, 'JPG');

        // Output
        $pdf->Output(storage_path('cards/pdf/' . $id .'.pdf'), 'I');
    }

    /** 
     * Request Design List from GET endpoint
     */
    private function requestDesignList()
    {
        try 
        {
            $response = Http::get('https://appdsapi-6aa0.kxcdn.com/content.php?lang=en&json=1&search_text=berlin&currencyiso=EUR');

            if ($response->ok())
            {
                $data = array_slice( $response->json()["content"], 0, 25);

                // Generate data to output
                $result = array();
                
                foreach ($data as $card)
                {
                    // Request product options
                    $productPrices = $this->getProductPrices($card['id']);

                    // Resize image
                    $thumbImage     = $this->downloadImage($card["thumb_url"]);
                    $largeImage     = $this->downloadImage($card["full_url"], "full_" . $card['id']);
                    $encodedImage   = $this->resizeCardImage($thumbImage);

                    $entry = array(
                        "id"            => $card["id"],
                        "title"         => $card["title"],
                        "price"         => floatval($card["price_foldingcard"]),
                        "addOnPrice"    => floatval($productPrices["products"][0]["product_options"]["Envelope"]["price"]),
                        "thumb"         => $encodedImage
                    );

                    $result[] = $entry;
                }


                return $result;
            }
        }
        catch(Exception $e)
        {
            return false;
        }
    }

    /**
     * Request product prices for a card
     */
    private function getProductPrices($id)
    {
        try 
        {
            $response = Http::get('https://www.mypostcard.com/mobile/product_prices.php?json=1&type=get_postcard_products&currencyiso=EUR&store_id=' . $id);

            if ($response->ok())
            {
                return $response->json();                
            }
        }
        catch(Exception $e)        
        {
            return false;
        }
    }

    /**
     * Download an image from url and save to storage
     */
    private function downloadImage($url, $altName="")
    {
        $name       = substr($url, strrpos($url, '/') + 1);
        $path       = 'cards/' . ($altName == "" ? $name : $altName . ".jpg"); 
        $realpath   = storage_path('app/' . $path);

        if (!file_exists($realpath))
        {
            // Download if not exists
            $contents   = file_get_contents($url);
            Storage::put($path, $contents);
        }

        return $path;
    }

    /**
     * Return a base64 encoded image from path generated by downloadImage
     */
    private function resizeCardImage($path, $size=350)
    {
        $realPath = storage_path('app/' . $path);
        $manager = new ImageManager(array('driver' => 'gd'));
        $image = $manager->make($realPath)->resize($size, $size)->encode('data-url');

        return $image;
    }
}
